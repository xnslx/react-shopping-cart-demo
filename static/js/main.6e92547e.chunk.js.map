{"version":3,"sources":["Component/Items/Items.js","Component/Sumup/Sumup.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","type","value","onChange","changed","onClick","incHandler","decHandler","delateHandler","Sumup","style","marginBottom","marginTop","icon","library","add","faShoppingCart","initialState","id","reducer","state","action","map","item","filter","App","useReducer","dispatch","useState","setItems","changeHandler","e","target","itemsArray","itemsNumHandler","arr","push","pop","className","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAceA,G,MAZD,SAACC,GAEX,OACI,6BACI,2BAAOC,KAAK,SAASC,MAAOF,EAAME,MAAOC,SAAUH,EAAMI,UACzD,4BAAQC,QAASL,EAAMM,YAAvB,KACA,4BAAQD,QAASL,EAAMO,YAAvB,KACA,4BAAQF,QAASL,EAAMQ,eAAvB,Q,QCIGC,EAVD,SAACT,GACX,OACI,yBAAKU,MAAO,CAACC,aAAa,OAAQC,UAAW,SACzC,kBAAC,IAAD,CAAiBC,KAAK,kBACtB,kDACA,2BAAOZ,KAAK,SAASE,SAAUH,EAAMI,QAASF,MAAOF,EAAME,U,eCFvEY,IAAQC,IAAIC,KAEZ,IAAMC,EAAe,CACnB,CAAEC,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,IAGZiB,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOpB,MACb,IAAK,YACH,OAAOmB,EAAME,KAAI,SAAAC,GACf,OAAIA,EAAKL,KAAOG,EAAOH,GACd,2BAAIK,GAAX,IAAiBrB,MAAOqB,EAAKrB,MAAO,IAE/BqB,KAEX,IAAK,YACD,OAAOH,EAAME,KAAI,SAAAC,GACf,OAAIA,EAAKL,KAAOG,EAAOH,IAAMK,EAAKrB,MAAQ,EACjC,2BAAIqB,GAAX,IAAiBrB,MAAOqB,EAAKrB,MAAQ,IAEhCqB,KAEb,IAAK,SACH,OAAOH,EAAMI,QAAO,SAAAD,GAAI,OAAIA,EAAKL,KAAOG,EAAOH,MACjD,IAAK,QACH,OAAOD,EACT,QACE,OAAOG,IA8CEK,MA1Cf,WAAgB,IAAD,EACaC,qBAAWP,EAASF,GADjC,mBACNG,EADM,KACCO,EADD,OAEMC,mBAASX,GAArBY,EAFM,oBAIPC,EAAgB,SAAAC,GACpBF,EAAS,CAAC3B,MAAO6B,EAAEC,OAAO9B,SAGxB+B,EAAa,GACXC,EAAkB,SAAAC,GAAQ,IAAD,gBACZA,GADY,IAC7B,2BAAsB,CAAC,IAAdZ,EAAa,QAChBA,EAAKrB,MAAQ,GACf+B,EAAWG,KAAKb,GAEdA,EAAKrB,MAAQ,GACf+B,EAAWI,IAAId,IANU,8BAS7B,OAAOU,GAIT,OAFAC,EAAgBd,GAGd,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CAAOlC,QAAS8B,EAAiBhC,MAAO+B,EAAWM,SACnD,6BACGnB,EAAME,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CACErB,MAAOqB,EAAKrB,MACZsC,IAAKjB,EAAKL,GACVd,QAAS0B,EACTxB,WAAY,kBAAMqB,EAAS,CAAE1B,KAAM,YAAaiB,GAAIK,EAAKL,MACzDX,WAAY,kBAAMoB,EAAS,CAAE1B,KAAM,YAAaiB,GAAGK,EAAKL,MACxDV,cAAe,kBAAMmB,EAAS,CAAE1B,KAAM,SAAUiB,GAAGK,EAAKL,YAI9D,4BAAQb,QAAS,kBAAMsB,EAAS,CAAC1B,KAAM,WAAWS,MAAO,CAACE,UAAW,SAArE,WCjEc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e92547e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Items = (props) => {\n    // console.log(props)\n    return (\n        <div>\n            <input type=\"number\" value={props.value} onChange={props.changed}/>\n            <button onClick={props.incHandler}>+</button>\n            <button onClick={props.decHandler}>-</button>\n            <button onClick={props.delateHandler}>X</button>\n        </div>\n    )\n}\n\nexport default Items;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Sumup = (props) => {\n    return (\n        <div style={{marginBottom:'40px', marginTop: '20px'}}>\n            <FontAwesomeIcon icon=\"shopping-cart\"/>\n            <span>The total items:</span>\n            <input type=\"number\" onChange={props.changed} value={props.value}/>\n        </div>\n    )\n};\n\nexport default Sumup;\n","import React, {useReducer, useState} from 'react';\nimport './App.css';\nimport Items from '../src/Component/Items/Items';\nimport Sumup from './Component/Sumup/Sumup';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faShoppingCart} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faShoppingCart);\n\nconst initialState = [\n  { id: 1, value: 0 },\n  { id: 2, value: 0 },\n  { id: 3, value: 0 },\n  { id: 4, value: 0 }\n];\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state.map(item => {\n        if (item.id === action.id) {\n          return {...item, value: item.value +1}\n        }\n        return item;\n      })\n    case \"DECREMENT\":\n        return state.map(item => {\n          if (item.id === action.id && item.value > 0) {\n            return {...item, value: item.value - 1}\n          }\n          return item;\n        })\n    case \"DELATE\":\n      return state.filter(item => item.id !== action.id);\n    case \"RESET\" :\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [setItems] = useState(initialState)\n\n  const changeHandler = e => {\n    setItems({value: e.target.value})\n  }\n\n  let itemsArray = [];\n  const itemsNumHandler = arr => {\n    for (let item of arr) {\n      if (item.value > 0) {\n        itemsArray.push(item);\n      }\n      if (item.value < 0) {\n        itemsArray.pop(item);\n      }\n    }\n    return itemsArray;\n  };\n  itemsNumHandler(state);\n\n  return (\n    <div className=\"App\">\n      <Sumup changed={itemsNumHandler} value={itemsArray.length}/>\n      <div>\n        {state.map(item => (\n          <Items\n            value={item.value}\n            key={item.id}\n            changed={changeHandler}\n            incHandler={() => dispatch({ type: \"INCREMENT\", id: item.id })}\n            decHandler={() => dispatch({ type: \"DECREMENT\", id:item.id })}\n            delateHandler={() => dispatch({ type: \"DELATE\", id:item.id })}\n          />\n        ))}\n      </div>\n      <button onClick={() => dispatch({type: \"RESET\"})} style={{marginTop: '40px'}}>Reset</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}